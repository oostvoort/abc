// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Duel")));
bytes32 constant DuelTableId = _tableId;

struct DuelData {
  bytes32 player0;
  bytes32 player1;
  uint256 deadline;
  bool ongoing;
  uint8 player0Wins;
  uint8 player1Wins;
}

library Duel {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.UINT256;
    _schema[3] = SchemaType.BOOL;
    _schema[4] = SchemaType.UINT8;
    _schema[5] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "player0";
    _fieldNames[1] = "player1";
    _fieldNames[2] = "deadline";
    _fieldNames[3] = "ongoing";
    _fieldNames[4] = "player0Wins";
    _fieldNames[5] = "player1Wins";
    return ("Duel", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get player0 */
  function getPlayer0(bytes32 duelEntity) internal view returns (bytes32 player0) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get player0 (using the specified store) */
  function getPlayer0(IStore _store, bytes32 duelEntity) internal view returns (bytes32 player0) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set player0 */
  function setPlayer0(bytes32 duelEntity, bytes32 player0) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((player0)));
  }

  /** Set player0 (using the specified store) */
  function setPlayer0(IStore _store, bytes32 duelEntity, bytes32 player0) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((player0)));
  }

  /** Get player1 */
  function getPlayer1(bytes32 duelEntity) internal view returns (bytes32 player1) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get player1 (using the specified store) */
  function getPlayer1(IStore _store, bytes32 duelEntity) internal view returns (bytes32 player1) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set player1 */
  function setPlayer1(bytes32 duelEntity, bytes32 player1) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((player1)));
  }

  /** Set player1 (using the specified store) */
  function setPlayer1(IStore _store, bytes32 duelEntity, bytes32 player1) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((player1)));
  }

  /** Get deadline */
  function getDeadline(bytes32 duelEntity) internal view returns (uint256 deadline) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get deadline (using the specified store) */
  function getDeadline(IStore _store, bytes32 duelEntity) internal view returns (uint256 deadline) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set deadline */
  function setDeadline(bytes32 duelEntity, uint256 deadline) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((deadline)));
  }

  /** Set deadline (using the specified store) */
  function setDeadline(IStore _store, bytes32 duelEntity, uint256 deadline) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((deadline)));
  }

  /** Get ongoing */
  function getOngoing(bytes32 duelEntity) internal view returns (bool ongoing) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get ongoing (using the specified store) */
  function getOngoing(IStore _store, bytes32 duelEntity) internal view returns (bool ongoing) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set ongoing */
  function setOngoing(bytes32 duelEntity, bool ongoing) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((ongoing)));
  }

  /** Set ongoing (using the specified store) */
  function setOngoing(IStore _store, bytes32 duelEntity, bool ongoing) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((ongoing)));
  }

  /** Get player0Wins */
  function getPlayer0Wins(bytes32 duelEntity) internal view returns (uint8 player0Wins) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get player0Wins (using the specified store) */
  function getPlayer0Wins(IStore _store, bytes32 duelEntity) internal view returns (uint8 player0Wins) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set player0Wins */
  function setPlayer0Wins(bytes32 duelEntity, uint8 player0Wins) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((player0Wins)));
  }

  /** Set player0Wins (using the specified store) */
  function setPlayer0Wins(IStore _store, bytes32 duelEntity, uint8 player0Wins) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((player0Wins)));
  }

  /** Get player1Wins */
  function getPlayer1Wins(bytes32 duelEntity) internal view returns (uint8 player1Wins) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get player1Wins (using the specified store) */
  function getPlayer1Wins(IStore _store, bytes32 duelEntity) internal view returns (uint8 player1Wins) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set player1Wins */
  function setPlayer1Wins(bytes32 duelEntity, uint8 player1Wins) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((player1Wins)));
  }

  /** Set player1Wins (using the specified store) */
  function setPlayer1Wins(IStore _store, bytes32 duelEntity, uint8 player1Wins) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((player1Wins)));
  }

  /** Get the full data */
  function get(bytes32 duelEntity) internal view returns (DuelData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 duelEntity) internal view returns (DuelData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 duelEntity,
    bytes32 player0,
    bytes32 player1,
    uint256 deadline,
    bool ongoing,
    uint8 player0Wins,
    uint8 player1Wins
  ) internal {
    bytes memory _data = encode(player0, player1, deadline, ongoing, player0Wins, player1Wins);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 duelEntity,
    bytes32 player0,
    bytes32 player1,
    uint256 deadline,
    bool ongoing,
    uint8 player0Wins,
    uint8 player1Wins
  ) internal {
    bytes memory _data = encode(player0, player1, deadline, ongoing, player0Wins, player1Wins);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 duelEntity, DuelData memory _table) internal {
    set(
      duelEntity,
      _table.player0,
      _table.player1,
      _table.deadline,
      _table.ongoing,
      _table.player0Wins,
      _table.player1Wins
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 duelEntity, DuelData memory _table) internal {
    set(
      _store,
      duelEntity,
      _table.player0,
      _table.player1,
      _table.deadline,
      _table.ongoing,
      _table.player0Wins,
      _table.player1Wins
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (DuelData memory _table) {
    _table.player0 = (Bytes.slice32(_blob, 0));

    _table.player1 = (Bytes.slice32(_blob, 32));

    _table.deadline = (uint256(Bytes.slice32(_blob, 64)));

    _table.ongoing = (_toBool(uint8(Bytes.slice1(_blob, 96))));

    _table.player0Wins = (uint8(Bytes.slice1(_blob, 97)));

    _table.player1Wins = (uint8(Bytes.slice1(_blob, 98)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes32 player0,
    bytes32 player1,
    uint256 deadline,
    bool ongoing,
    uint8 player0Wins,
    uint8 player1Wins
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(player0, player1, deadline, ongoing, player0Wins, player1Wins);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 duelEntity) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 duelEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 duelEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = duelEntity;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
