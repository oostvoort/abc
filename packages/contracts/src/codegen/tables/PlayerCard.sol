// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("PlayerCard")));
bytes32 constant PlayerCardTableId = _tableId;

struct PlayerCardData {
  bytes32 cardEntity;
  uint256 exp;
}

library PlayerCard {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](2);
    _fieldNames[0] = "cardEntity";
    _fieldNames[1] = "exp";
    return ("PlayerCard", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get cardEntity */
  function getCardEntity(bytes32 playerCardEntity) internal view returns (bytes32 cardEntity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get cardEntity (using the specified store) */
  function getCardEntity(IStore _store, bytes32 playerCardEntity) internal view returns (bytes32 cardEntity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set cardEntity */
  function setCardEntity(bytes32 playerCardEntity, bytes32 cardEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((cardEntity)));
  }

  /** Set cardEntity (using the specified store) */
  function setCardEntity(IStore _store, bytes32 playerCardEntity, bytes32 cardEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((cardEntity)));
  }

  /** Get exp */
  function getExp(bytes32 playerCardEntity) internal view returns (uint256 exp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get exp (using the specified store) */
  function getExp(IStore _store, bytes32 playerCardEntity) internal view returns (uint256 exp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set exp */
  function setExp(bytes32 playerCardEntity, uint256 exp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((exp)));
  }

  /** Set exp (using the specified store) */
  function setExp(IStore _store, bytes32 playerCardEntity, uint256 exp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((exp)));
  }

  /** Get the full data */
  function get(bytes32 playerCardEntity) internal view returns (PlayerCardData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 playerCardEntity) internal view returns (PlayerCardData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 playerCardEntity, bytes32 cardEntity, uint256 exp) internal {
    bytes memory _data = encode(cardEntity, exp);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, bytes32 playerCardEntity, bytes32 cardEntity, uint256 exp) internal {
    bytes memory _data = encode(cardEntity, exp);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 playerCardEntity, PlayerCardData memory _table) internal {
    set(playerCardEntity, _table.cardEntity, _table.exp);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 playerCardEntity, PlayerCardData memory _table) internal {
    set(_store, playerCardEntity, _table.cardEntity, _table.exp);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (PlayerCardData memory _table) {
    _table.cardEntity = (Bytes.slice32(_blob, 0));

    _table.exp = (uint256(Bytes.slice32(_blob, 32)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(bytes32 cardEntity, uint256 exp) internal pure returns (bytes memory) {
    return abi.encodePacked(cardEntity, exp);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 playerCardEntity) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 playerCardEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 playerCardEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerCardEntity;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
